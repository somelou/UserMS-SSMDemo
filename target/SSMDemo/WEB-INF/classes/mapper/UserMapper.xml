<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- ==================代理方式=================
 由mapper标签开始，由/mapper结束，可以把它想成一个空间，是映射文件
 属性namespace：空间名，主要在代理中使用。这个namespace是唯一的。
 这里把mapper标签和接口联系在一起了，namespace=写接口路径，映射文件要和接口在同一目录下
  -->
<mapper namespace="com.dao.IUserDao">
    <!-- =============映射关系标签=============
属性type:写po(jo)类的包名类名，由于之前定义了po类的别名，这里就写这个别名
属性id：是这个映射标签的唯一标识
id标签是查询结果集中的唯一标识
属性column：查询出来的列名
属性property：是po类里所指定的列名
通常会在原列名后面加下划线，这是固定的，这里就是id后面_
 -->
    <resultMap type="User" id="userResultMap">
        <id property="userName" column="username"/>
        <result property="userPassword" column="passwd"/>
        <result property="userType" column="usertype"/>
        <result property="userGender" column="gender"/>
        <result property="userHobby" column="hobby"/>
        <result property="userBirthday" column="birthday"/>
        <result property="userEmail" column="email"/>
        <result property="userIntroduction" column="Introduction"/>
    </resultMap>
    <!-- ==================定义sql片段==============
    sql:是sql片段标签属性id是该片段的唯一标识 -->
    <sql id="zd">
        username,passwd,usertype,gender,hobby,birthday,email,introduction
    </sql>
    <!-- 增删改查标签里的id:一定要和接口里对应的方法名一致，
          resultMap输出类型里写映射标签里的id
          parameterType：输入类型，规范输入数据类型，指明查询时使用的参数类型-->
    <insert id="addUser" parameterType="User">
        insert into usertable
        values ('${userName}','${userPassword}','${userType}','${userGender}','${userHobby}','${userBirthday}','${userEmail}','${userIntroduction}')
    </insert>

    <delete id="deleteUser" parameterType="String">

        DELETE FROM usertable <where>username=#{userName}</where>
    </delete>

    <update id="updateUser" parameterType="User">
        UPDATE usertable
        SET passwd = #{userPassword},usertype = #{userType},gender =
        #{userGender},hobby=#{userHobby},birthday=#{userBirthday},email=#{userEmail},introduction=#{userIntroduction}
        <where>username=#{userName}</where>
    </update>

    <!-- 根据用户名模糊查询，根据权限查询 -->
    <select id="findSomeUser" resultMap="userResultMap" parameterType="String">
        <!-- 用include标签引入sql片段，refid写定义sql片段的id，where标签不要写在片段里 -->
        select
        <include refid="zd"/>
        from usertable
        <!-- 当页面没有输入用户名和选择权限，就让它的条件永远为真，就变成全查询了 -->
        <where>
<!--        直接用userName会提示“There is no getter for property named in ‘class java.lang.String’”
            该错误发生在<if test="XXX">中
            用_parameter替代可解决-->
            <if test="_parameter != null and _parameter !=''">
                and username LIKE '%${_parameter}%'

            </if>
            <if test="_parameter == null and _parameter = '' ">
                and 1=1
            </if>

        </where>
    </select>

    <select id="findAllUser" resultMap="userResultMap">
        SELECT * FROM usertable
    </select>

</mapper>
